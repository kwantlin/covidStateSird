p <- function(t) t^2 - 3*t + 2
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
A <- matrix(c(1,1,1,0,3,2,0,-1,0), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 3*t + 2
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - I)%*%w; v0
A%*%v0; 2*v0      #eigenvector for eigenvalue 2
v1 <- (A - 2*I)%*%w; v1
A%*%v1; 1*v1      #eigenvector for eigenvalue 1
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
v0 <- (A - I)%*%w; v0
A%*%v0; 2*v0      #eigenvector for eigenvalue 2
v1 <- (A - 2*I)%*%w; v1
A <- matrix(c(2,0,0, 1,2,1,-1,0,1), 3);A
w1 <- c(1,0,0)
T <- cbind(w1, A%*%w1); T
rref(T)
w2 <- c(0,1,0)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
v1 <- (A-2*I)%*%w2
A <- matrix(c(1,1,1,0,3,2,0,-1,0), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 3*t + 2
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - I)%*%w; v0
A%*%v0; 2*v0      #eigenvector for eigenvalue 2
v1 <- (A - 2*I)%*%w; v1
A%*%v1; 1*v1      #eigenvector for eigenvalue 1
w <- c(0,1,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
v0 <- (A - I)%*%w; v0
A%*%v0; 2*v0      #eigenvector for eigenvalue 2
v1 <- (A - 2*I)%*%w; v1
A%*%v1; 1*v1      #eigenvector for eigenvalue 1
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
library("pracma")
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
I <- diag(c(1,1,1))
v0 <- (A - 4I)%*%w; v0
v0 <- (A - 4*I)%*%w; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w <- c(0,1,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w <- c(0,0,1)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
library("pracma")
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w <- c(0,0,1)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w; v0
w <- c(0,1,1)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w; v0
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
eigen(A)
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
eigen(A)
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w <- c(0,0,1)
w <- c(0,1,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w; v1
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w <- c(0,0,1)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w; v1
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w <- c(0,0,1)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w; v1
w <- c(0,1,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w; v1
w2 <- c(0,1,0)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w2; v1
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w1 <- c(1,0,0)
T <- cbind(w1, A%*%w1, A%*%A%*%w1); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w1; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
A
w2 <- c(0,2,3)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w2; v1
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w2 <- c(1,0,2)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w2; v1
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
library("pracma")
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
w1 <- c(1,0,0)
T <- cbind(w1, A%*%w1, A%*%A%*%w1); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w1; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w2 <- c(0,1,0)
w2 <- c(0,1,0)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w2; v1
v1 <- (A - 4*I)%*%w2; v1
A%*%v1; 4*v1      #2nd eigenvector for eigenvalue 4
w2 <- c(0,0,1)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
w2 <- c(0,0,1)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w2; v1
A%*%v1; 4*v1      #2nd eigenvector for eigenvalue 4
A <- matrix(c(3,-1,1,5),2); A
w <- c(1,0); w; A%*%w; A%*%A%*%w
T <- cbind( w, A%*%w, A%*%A%*%w); T
rref(T)
v<-(A-4*I)%*% w   #an eigenvector with eigenvalue 4
A<- matrix(c(1,2,3,4,2,-2,1,-3,3,1,-2,2,4,-3,2,1),4); A
identical(t(A),A)    #it is symmetric
w <- c(1,0,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w, A%*%A%*%A%*%A%*%w); T
pCoef <- rref(T)[,5]  #the last column
p <- function(t) t^4 - pCoef[4]* t^3 - pCoef[3]*t^2 - pCoef[2]*t - pCoef[1]   #real-world problems come out like this!
curve(p(x), from = -8, to =8); abline(h=0, col="red")
lam1 <- uniroot(p, c(5,7))$root;lam1; p(lam1)
A<- matrix(c(4,-1,1,-1,3,2,1,2,-3),3); A
w <- c(1,0,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
A<- matrix(c(4,-1,1,-1,3,2,1,2,-3),3); A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
A<- matrix(c(4,-1,1,-1,3,2,1,2,-3),3); A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
rref(T)
p <- function(t) t^3 -4*t^2 - 15*t+ 56
A<- matrix(c(4,-1,1,-1,3,2,1,2,-3),3); A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
rref(T)
library("pracma")
A<- matrix(c(4,-1,1,-1,3,2,1,2,-3),3); A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
rref(T)
p <- function(t) t^3 -4*t^2 - 15*t+ 56
curve(p(x), from = -8, to =8); abline(h=0, col="red")
curve(p(x), from = -5, to =8); abline(h=0, col="red")
lam1 <- uniroot(p, c(-5,2))$root;lam1; p(lam1)
lam2 <- uniroot(p, c(0,4))$root;lam2; p(lam2)
lam3 <- uniroot(p, c(4,8))$root;lam3; p(lam3)
eigen(A)$values
eigen(A)$values
lam1; lam2; lam3;
I <- diag(c(1,1,1,1))
I <- diag(c(1,1,1,1))
v <- (A-lam2*I )%*%(A-lam3*I )%*%w; v1<-v/sqrt(sum(v^2))
I <- diag(c(1,1,1))
v <- (A-lam2*I )%*%(A-lam3*I )%*%w; v1<-v/sqrt(sum(v^2))
A%*%v1; lam1*v1    #it checks!
v  <- (A-lam1*I )%*%(A-lam3*I )%*%w; v2<-v/sqrt(sum(v^2))
v  <- (A-lam1*I )%*%(A-lam2*I )%*%w; v3<-v/sqrt(sum(v^2))
P <- cbind(v1,v2,v3); PInv <-solve(P); D <- diag(c(lam1,lam2,lam3,))
I <- diag(c(1,1,1))
v <- (A-lam2*I )%*%(A-lam3*I )%*%w; v1<-v/sqrt(sum(v^2))
A%*%v1; lam1*v1    #it checks!
library("pracma")
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
w1 <- c(1,0,0)
T <- cbind(w1, A%*%w1, A%*%A%*%w1); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - 4*I)%*%w1; v0
A%*%v0; 4*v0      #eigenvector for eigenvalue 4
w2 <- c(0,1,0)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w2; v1
A%*%v1; 4*v1      #2nd eigenvector for eigenvalue 4
w2 <- c(0,0,1)
T <- cbind(w2, A%*%w2, A%*%A%*%w2); T
rref(T)
p <- function(t) t^2 - 8*t + 16
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v1 <- (A - 4*I)%*%w2; v1
A%*%v1; 4*v1      #2nd eigenvector for eigenvalue 4
A <- matrix(c(3,-1,1,5),2); A
library("pracma")
A<- matrix(c(4,-1,1,-1,3,2,1,2,-3),3); A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
rref(T)
p <- function(t) t^3 -4*t^2 - 15*t+ 56
curve(p(x), from = -5, to =8); abline(h=0, col="red")
lam1 <- uniroot(p, c(-5,2))$root;lam1; p(lam1)
lam2 <- uniroot(p, c(0,4))$root;lam2; p(lam2)
lam3 <- uniroot(p, c(4,8))$root;lam3; p(lam3)
eigen(A)$values
lam1; lam2; lam3;
I <- diag(c(1,1,1))
v <- (A-lam2*I )%*%(A-lam3*I )%*%w; v1<-v/sqrt(sum(v^2))
A%*%v1; lam1*v1    #it checks!
v  <- (A-lam1*I )%*%(A-lam3*I )%*%w; v2<-v/sqrt(sum(v^2))
A%*%v2; lam2*v2    #it checks!
v  <- (A-lam1*I )%*%(A-lam2*I )%*%w; v3<-v/sqrt(sum(v^2))
A%*%v3; lam3*v3    #it checks!
P <- cbind(v1,v2,v3); PInv <-solve(P); D <- diag(c(lam1,lam2,lam3,))
round(P%*%D%*%PInv, digits = 4);A  #we diagonalized A!!
P
P <- cbind(v1,v2,v3); PInv <-solve(P); D <- diag(c(lam1,lam2,lam3))
round(P%*%D%*%PInv, digits = 4);A  #we diagonalized A!!
round(t(P) %*%P, digits = 4)   #the columns are orthonormal
eigen(A)$vectors; P            #and we agree with the built-in function
A <- matrix(c(5,-1,0,1,3,0,1,-1,4), 3);A
I <- diag(c(1,1,1))
C <- A-4*I; C
rref(C)
D<- diag(c(4,4,4)); D
N<-C; N
N%*%N
A; A<- D+N; A
N%*%N #zero matrix
A <- matrix(c(3,1,3,4,3,6,-4,-1,-4), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
rref(T)
p <- function(t) t^3 - 2*t^2 - t + 2
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A + I)%*%(A - I)%*%w; v0
A%*%v0; 2*v0      #eigenvector for eigenvalue 2
v1 <- (A + I)%*%(A - 2*I)%*%w; v1
A%*%v1; 1*v1      #eigenvector for eigenvalue 1
v3 <- (A - I)%*%(A - 2*I)%*%w; v3
A%*%v3; -1*v3      #eigenvector for eigenvalue -1
A <- matrix(c(1,1,1,0,3,2,0,-1,0), 3);A
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
p <- function(t) t^2 - 3*t + 2
curve(p(x), from = -1, to = 4); abline(h=0, col = "red")
I <- diag(c(1,1,1))
v0 <- (A - I)%*%w; v0
A%*%v0; 2*v0      #eigenvector for eigenvalue 2
v1 <- (A - 2*I)%*%w; v1
v1 <- (A - 2*I)%*%w; v1
A%*%v1; 1*v1      #eigenvector for eigenvalue 1
w <- c(0,1,0)
T <- cbind(w, A%*%w, A%*%A%*%w); T
rref(T)
v1 <- (A - 2*I)%*%w; v1
A%*%v1; 1*v1      #2nd eigenvector for eigenvalue 1
A<- matrix(c(4,-1,1,-1,3,2,1,2,-3),3); A
identical(t(A),A)    #it is symmetric
w <- c(1,0,0)
T <- cbind(w, A%*%w, A%*%A%*%w, A%*%A%*%A%*%w); T
det(P)
a <- runif(1); a   #between 0 and 1
b <- a + runif(1, min = 0.0001, max = 0.0002); b
par(mar=c(4 , 4, 5, 2))
plot(NULL,NULL, xlim = c(a-0.00005,b+.00005), ylim = c(-1,1), type="n", ylab="",
axes =FALSE, main="The rational numbers are dense")
axis(3,pos = 0)
points(c(a,b), c(0,0), col = "red")  #Show points a and b
text(a, -0.07, "a", col = "red")
text(b, -0.07, "b", col = "red")
N <- round(2/(b-a)); N    #2 in the numerator will let us show two rationals in (a,b)
m <- trunc(N*a)+1; m
points(m/N, 0, pch = 20, col = "green" )
points((m+1)/N, 0, pch = 20, col = "green" )
text(m/N, -0.07, "q1", col = "green");
text((m+1)/N, -0.07, "q2", col = "green")
a <- pi; a   #between 0 and 1
a <- pi; a   #between 0 and 1
b <- 355/113; b
par(mar=c(4 , 4, 5, 2))
plot(NULL,NULL, xlim = c(a-0.00005,b+.00005), ylim = c(-1,1), type="n", ylab="",
axes =FALSE, main="The rational numbers are dense")
axis(3,pos = 0)
points(c(a,b), c(0,0), col = "red")  #Show points a and b
text(a, -0.07, "a", col = "red")
text(b, -0.07, "b", col = "red")
N <- round(2/(b-a)); N    #2 in the numerator will let us show two rationals in (a,b)
m <- trunc(N*a)+1; m
points(m/N, 0, pch = 20, col = "green" )
points((m+1)/N, 0, pch = 20, col = "green" )
text(m/N, -0.07, "q1", col = "green");
a <- pi; a   #between 0 and 1
b <- 355/113; b
par(mar=c(4 , 4, 5, 2))
plot(NULL,NULL, xlim = c(a-0.00005,b+.00005), ylim = c(-1,1), type="n", ylab="",
axes =FALSE, main="The rational numbers are dense")
axis(3,pos = 0)
points(c(a,b), c(0,0), col = "red")  #Show points a and b
text(a, -0.07, "a", col = "red")
text(b, -0.07, "b", col = "red")
N <- round(2/(b-a)); N    #2 in the numerator will let us show two rationals in (a,b)
m <- trunc(N*a)+1; m; m/N
p <- c(TRUE, FALSE); p   #useful style: save and display
!TRUE; !FALSE
NOTp <- !p; NOTp
NotTable <- data.frame(p,NOTp); NotTable
p <- c(TRUE, TRUE, FALSE, FALSE)
q <- c(T,F,T,F); q
T; F    #careful -- don't assign a new value to T or F!
pANDq <- p&q; pANDq
p&&q #&& does not produce a vector. It looks just at the first component.
pORq <- p|q; pORq
p||q #|| does not produce a vector
AndOrTable <- data.frame(p,q,pANDq, pORq); AndOrTable
!(pANDq); (!p) | (!q)
setwd("~/GitHub/covidStateSird/vignettes")
# foreach(i = 1:length(states)) %dopar% {
#   stateSird(states[i], covariates, stateInterventions, stateCovidData, randomForestDeathModel,
#   posteriorSamples, rfError = T)
# }
for(i in 1:length(states)) {
stateSird(states[i], covariates, stateInterventions, stateCovidData, randomForestDeathModel,
posteriorSamples, rfError = T)
}
## ----load_libraries-----------------------------------------------------------
# install.packages("covidStateSird", repos = "http://cran.us.r-project.org")
# install.packages("rjags", repos = "http://cran.us.r-project.org")
# library(rjags)
install.packages("randomForest", repo="http://cran.r-project.org", dep=T)
library(randomForest)
library(covidStateSird)
library(foreach)
library(dplyr)
# the last day of data to use
endDate <- "2020-11-23"
minCase <- 100
set.seed(525600)
covidDir <- ".."
doParallel::registerDoParallel(cores=5)
outputPath <- file.path(covidDir, "Output", Sys.Date())
dir.create(outputPath)
dir.create(file.path(outputPath, "Tables/"))
dir.create(file.path(outputPath, "Plots/"))
dir.create(file.path(outputPath, "Data/"))
stateInterventions <- read.csv(paste0(covidDir, "/Data/StateInterventionDates.csv"),
stringsAsFactors = FALSE,
header = TRUE)
stateDataCSV <- "https://raw.githubusercontent.com/COVID19Tracking/covid-public-api/master/v1/states/daily.csv"
vaccineData <- read.csv(paste0(covidDir, "/Data/us_state_vaccinations.csv"),
stringsAsFactors = FALSE,
header = TRUE)
stateCovidData <- read.csv(stateDataCSV)
covariates <- read.csv(paste0(covidDir, "/Data/COVID-19 Location Covariates - analyticStates.csv"))
covariates[, c("heartDisease", "lungCancer", "diabetes", "copd")] <-
covariates[, c("heartDisease", "lungCancer", "diabetes", "copd")] / 100000
states <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD",
"ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH",
"NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")
velocLogCases <- velocLogDeaths <- data.frame()
loc <- 0
for(i in 1:length(states)) {
loc <- loc + 1
velocLoc <- velocitiesState(stateCovidData, states[i], stateInterventions, minCases = minCase, endDate = endDate)
population <- stateInterventions$statePopulation[stateInterventions$stateAbbreviation == states[i]]
velocLogCases <- rbind(velocLogCases, cbind(velocLoc$cases,  loc, row.names = NULL))
}
velocLogCasesList <- as.list(velocLogCases)
velocLogCasesList$N <- nrow(velocLogCases)
velocLogCasesList$nLoc <- length(unique(velocLogCasesList$loc))
velocLogCasesList$y[velocLogCasesList$y <= 0] <- NA
print(names(velocLogCasesList))
params <- c("mu_a", "mu_b", "tau", "a", "b", "g", "d", "mu_g", "mu_d", "mu", "alpha", "beta", "mu_alpha", "mu_beta")
start <- Sys.time()
velocModel <- R2jags::jags(data = velocLogCasesList, inits = NULL, parameters.to.save = params,
model.file = riasJagsModel, n.chains = 3, n.iter = 100, n.burnin = 10, n.thin = 10, DIC = F)
timeElapsed <- (Sys.time() - start)
plotVelocityFit(velocModel$BUGSoutput$mean,
stateCovidData, states, stateInterventions,
fileName = paste0(outputPath, "/Plots/velocityModelFit.pdf"))
c_S_pre <- caseModelConstant(velocModel, intervention = 0)
c_S_post <- caseModelConstant(velocModel, intervention = 1)
rownames(c_S_pre) <- NULL
rownames(c_S_post) <- NULL
posteriorSamples <- velocModel$BUGSoutput$sims.list
posteriorSamples[["c_pre"]] <- c_S_pre
posteriorSamples[["c_post"]] <- c_S_post
save(posteriorSamples,
file = paste0(outputPath, "/CasePosteriorSamples", endDate, ".Rdata"))
# run state SIRD models
randomForestDeathModel <- deathForest(stateCovidData, states, covariates, 21, fileOut = paste0(outputPath, "/randomForestDeathModel.Rdata"))
load(paste0(outputPath, "/CasePosteriorSamples", endDate, ".Rdata"))
# foreach(i = 1:length(states)) %dopar% {
#   stateSird(states[i], covariates, stateInterventions, stateCovidData, randomForestDeathModel,
#   posteriorSamples, rfError = T)
# }
for(i in 1:length(states)) {
stateSird(states[i], covariates, stateInterventions, stateCovidData, randomForestDeathModel,
posteriorSamples, rfError = T)
}
